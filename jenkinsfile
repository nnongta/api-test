pipeline {
    agent {
        label 'master'
    }
    environment {
        REGISTRY = "ghcr.io/nnongta"
        IMAGE_NAME = "simple-api"
        IMAGE_TAG = "latest"
        ROBOT_REPO = 'https://github.com/nnongta/jenkins-robot'
        ROBOT_BRANCH = 'main'
    }
    
    stages {
        stage('Install Dependencies') {
            steps {
                sh """
                    python3 -m venv venv
                    source venv/bin/activate
                    pip install --upgrade pip
                    pip install -r requirement.txt
                """
            }   
        }



        stage('Install & Run Unittest') {
            steps {
                sh "python3 -m pip install -r requirement.txt"
                sh "python3 unit_test.py"
            }
        }

        stage('Create Image') {
            steps {
                sh "docker build -t ${IMAGE_NAME}:${BUILD_ID} ."
            }
        }

        stage('Run Container & Run Robot Testing') {
            steps {
                sh "docker run -dp 5001:5001 --name ${IMAGE_NAME} ${IMAGE_NAME}:${BUILD_ID}"
                git branch: "${ROBOT_BRANCH}", url: "${ROBOT_REPO}"
                sh "robot plus.robot"
            }

            post {
                always {
                    sh "docker stop ${IMAGE_NAME} || true"
                    sh "docker rm ${IMAGE_NAME} || true"
                }
            }
        }

        stage('Push to Registry') {
            steps {
                sh 'echo $REGISTRY_CREDENTIALS_PSW | docker login ghcr.io -u $REGISTRY_CREDENTIALS_USR --password-stdin'
                sh "docker push ${IMAGE_NAME}:${BUILD_ID}"
            }
        }

        stage('Deploy to VM3 (Pre-Prod)') {
            agent { label 'vm3' }
            steps {
                sh "docker stop ${IMAGE_NAME} || true"
                sh "docker rm ${IMAGE_NAME} || true"
                sh 'echo $REGISTRY_CREDENTIALS_PSW | docker login ghcr.io -u $REGISTRY_CREDENTIALS_USR --password-stdin'
                sh "docker run -dp 5001:5001 --name ${IMAGE_NAME} ${IMAGE_NAME}:${BUILD_ID}"
            }
        }
    }

    post {
        always {
            sh "docker system prune -af || true"
        }
    }
}
