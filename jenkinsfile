pipeline {
    agent {
        label 'master'
    }
    environment {
        REGISTRY = "ghcr.io/nnongta"
        IMAGE_NAME = "simple-api"
        IMAGE_TAG = "latest"
    }
    stages {
        // stage('Clone Repo') {
        //     agent { label 'vm2' }
        //     steps {
                
        //             sh '''
        //             rm -r api-test
        //             // git clone https://github.com/nnongta/api-test.git
        //             cd api-test
        //             '''
                
        //     }
        // }

        stage("Remove old images/containers"){
            steps{
                sh "docker stop \$(docker ps -a -q) || true"
                sh "docker rm \$(docker ps -a -q) || true"
                sh "docker rmi -f \$(docker images -q) || true"
            }
        }

        stage("Build") {
            steps {
                sh "docker build --tag ${IMAGE_NAME} ."
                sh "docker image ls"
            }
        }

        stage('Run Unit Tests') {
            agent { label 'vm2' }
            steps {
                sh '''
                cd api-test
                docker run -d -p 5000:5000 ${IMAGE_NAME}
                python unit_test.py
                '''
            }
        }

        stage('Build Docker Image') {
            agent { label 'vm2' }
            steps {
                sh '''
                docker --version || { echo "Docker is not installed!"; exit 1; }
                cd api-test
                docker build -t $REGISTRY/$IMAGE_NAME:$IMAGE_TAG .
                '''
            }
        }


        
        
        stage('Push to Registry') {
            agent { label 'vm2' }
            steps {
                withCredentials([usernamePassword(credentialsId: 'github-access', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh '''
                    echo $PASSWORD | docker login ghcr.io -u $USERNAME --password-stdin
                    for i in {1..3}; do
                        docker push $REGISTRY/$IMAGE_NAME:$IMAGE_TAG && break || sleep 10
                    done
                    '''
                }
            }
        }
        stage('Deploy to VM2') {
            agent { label 'vm2' }
            steps {
                sh '''
                docker pull $REGISTRY/$IMAGE_NAME:$IMAGE_TAG
                docker stop simple-api-container || true
                docker rm -f simple-api-container || true
                docker run -d --name simple-api-container -p 5000:5000 $REGISTRY/$IMAGE_NAME:$IMAGE_TAG
                '''
            }
        }
        stage('Run Robot Tests on VM2') {
            agent { label 'vm2' }
            steps {
                withCredentials([usernamePassword(credentialsId: 'github-access', usernameVariable: 'USERNAME', passwordVariable: 'TOKEN')]) {
                    sh '''
                    rm -rf robot-tests
                    git clone https://$USERNAME:$TOKEN@github.com/yourusername/robot-tests.git
                    cd robot-tests
                    robot test_plus.robot || { echo "Robot tests failed"; exit 1; }
                    '''
                }
            }
        }
        stage('Deploy to VM3 (Pre-Prod)') {
            agent { label 'vm3' }
            steps {
                sh '''
                docker pull $REGISTRY/$IMAGE_NAME:$IMAGE_TAG
                docker stop simple-api-container || true
                docker rm -f simple-api-container || true
                docker run -d --name simple-api-container -p 5000:5000 $REGISTRY/$IMAGE_NAME:$IMAGE_TAG
                '''
            }
        }
    }
}